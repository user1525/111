package main

import (
	"bufio"
	"database/sql"
	"log"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã ---

type UserProfile struct {
	UserID     int64
	Username   string
	Department string
	Profession string
	City       string
	Experience string
	Portfolio  string
}

var (
	bot          *tgbotapi.BotAPI
	db           *sql.DB
	userStates   = map[int64]string{}       // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö)
	userTempData = map[int64]*UserProfile{} // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
)

// --- –¶–µ—Ö–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ---

var departments = map[string][]string{
	"–†–µ–∂–∏—Å—Å–µ—Ä—Å–∫–∏–π —Ü–µ—Ö": {
		"–†–µ–∂–∏—Å—Å–µ—Ä—ã-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏",
		"–†–µ–∂–∏—Å—Å–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏",
		"–í—Ç–æ—Ä—ã–µ —Ä–µ–∂–∏—Å—Å–µ—Ä—ã",
		"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞",
		"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ø–æ –∞–∫—Ç–µ—Ä–∞–º",
		"–ü–æ–º–æ—â–Ω–∏–∫–∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞",
		"–ë—Ä–∏–≥–∞–¥–∏—Ä—ã –ê–ú–°",
		"–ö–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
	},
	"–ó–≤—É–∫–æ–≤–æ–π —Ü–µ—Ö": {
		"–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä—ã",
		"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä–∞",
	},
	"–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ü–µ—Ö": {
		"–í—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
		"–ö–∞–º–µ—Ä–º–µ–Ω—ã",
		"–§–æ–∫—É—Å-–ø—É–ª–ª–µ—Ä—ã",
		"–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –ø–∏–ª–æ—Ç—ã –∫–æ–ø—Ç–µ—Ä–æ–≤",
		"–ì–∞—Ñ—Ñ–µ—Ä",
		"–û—Å–≤–µ—Ç–∏—Ç–µ–ª–∏",
		"–ì—Ä–∏–ø",
	},
	"–ö–∞—Å–∫–∞–¥–µ—Ä—Å–∫–æ-–ø–∏—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç": {
		"–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ —Ç—Ä—é–∫–æ–≤",
		"–ö–∞—Å–∫–∞–¥–µ—Ä—ã",
		"–ü–∏—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏",
	},
	// –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ—Ö–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

// --- –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ---

func readTokenFromConfig(filename string) (string, error) {
	f, err := os.Open(filename)
	if err != nil {
		return "", err
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if strings.HasPrefix(line, "TOKEN=") {
			return strings.TrimSpace(strings.TrimPrefix(line, "TOKEN=")), nil
		}
	}
	return "", nil
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---

func initDB() error {
	var err error
	db, err = sql.Open("sqlite", "profiles.db")
	if err != nil {
		return err
	}
	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS users(
		user_id INTEGER PRIMARY KEY,
		username TEXT,
		department TEXT,
		profession TEXT,
		city TEXT,
		experience TEXT,
		portfolio TEXT
	)`)
	return err
}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î ---

func saveUserProfile(userID int64, username string) error {
	p := userTempData[userID]
	if p == nil {
		return nil
	}

	_, err := db.Exec(`
		INSERT INTO users(user_id, username, department, profession, city, experience, portfolio)
		VALUES (?, ?, ?, ?, ?, ?, ?)
		ON CONFLICT(user_id) DO UPDATE SET
		username=excluded.username,
		department=excluded.department,
		profession=excluded.profession,
		city=excluded.city,
		experience=excluded.experience,
		portfolio=excluded.portfolio
	`, p.UserID, username, p.Department, p.Profession, p.City, p.Experience, p.Portfolio)

	return err
}

// --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥ ---

func deleteMessageLater(chatID int64, messageID int, delaySeconds int) {
	go func() {
		time.Sleep(time.Duration(delaySeconds) * time.Second)
		bot.Request(tgbotapi.NewDeleteMessage(chatID, messageID))
	}()
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã ---

func sendMessageAutoDelete(chatID int64, text string, replyMarkup interface{}) (tgbotapi.Message, error) {
	msg := tgbotapi.NewMessage(chatID, text)
	if replyMarkup != nil {
		msg.ReplyMarkup = replyMarkup
	}
	sent, err := bot.Send(msg)
	if err == nil {
		deleteMessageLater(chatID, sent.MessageID, 180)
	}
	return sent, err
}

// --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–µ—Ö–∞ ---

func buildDepartmentsKeyboard() tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton
	for dept := range departments {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(dept, "dept_"+dept))
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttons...),
	)
	return keyboard
}

// --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Ü–µ—Ö–∞ ---

func buildProfessionsKeyboard(department string) tgbotapi.InlineKeyboardMarkup {
	profs, ok := departments[department]
	if !ok {
		return tgbotapi.InlineKeyboardMarkup{}
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	row := []tgbotapi.InlineKeyboardButton{}
	for i, prof := range profs {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(prof, "prof_"+prof))
		if (i+1)%2 == 0 {
			rows = append(rows, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}
	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	backBtn := tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –ù–∞–∑–∞–¥", "back_dept")
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(backBtn))
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery ---

func handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	switch {
	case data == "create_profile":
		userStates[userID] = "input_department"
		userTempData[userID] = &UserProfile{UserID: userID}
		msg, _ := sendMessageAutoDelete(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ü–µ—Ö:", buildDepartmentsKeyboard())
		deleteMessageLater(callback.Message.Chat.ID, callback.Message.MessageID, 1)
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"))
	case strings.HasPrefix(data, "dept_"):
		department := strings.TrimPrefix(data, "dept_")
		userTempData[userID].Department = department
		userStates[userID] = "input_profession"
		msg, _ := sendMessageAutoDelete(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ —Ü–µ—Ö–µ "+department+":", buildProfessionsKeyboard(department))
		deleteMessageLater(callback.Message.Chat.ID, callback.Message.MessageID, 1)
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–í—ã–±—Ä–∞–Ω —Ü–µ—Ö "+department))
	case strings.HasPrefix(data, "prof_"):
		profession := strings.TrimPrefix(data, "prof_")
		userTempData[userID].Profession = profession
		userStates[userID] = "input_city"
		sendMessageAutoDelete(callback.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:", nil)
		deleteMessageLater(callback.Message.Chat.ID, callback.Message.MessageID, 1)
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è "+profession))
	case data == "back_dept":
		userStates[userID] = "input_department"
		msg, _ := sendMessageAutoDelete(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ü–µ—Ö:", buildDepartmentsKeyboard())
		deleteMessageLater(callback.Message.Chat.ID, callback.Message.MessageID, 1)
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–ù–∞–∑–∞–¥ –∫ —Ü–µ—Ö–∞–º"))
	case data == "view_profiles":
		showProfilesList(callback.Message.Chat.ID)
		deleteMessageLater(callback.Message.Chat.ID, callback.Message.MessageID, 1)
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç"))
	default:
		bot.Request(tgbotapi.NewAnswerCallbackQuery(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))
	}
}

// --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥) ---

func showProfilesList(chatID int64) {
	rows, err := db.Query("SELECT username, department, profession, city FROM users")
	if err != nil {
		sendMessageAutoDelete(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª–µ–π", nil)
		return
	}
	defer rows.Close()

	var result strings.Builder
	result.WriteString("üìã –°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:\n\n")
	for rows.Next() {
		var username, department, profession, city string
		rows.Scan(&username, &department, &profession, &city)
		result.WriteString("üë§ @" + username + "\n")
		result.WriteString("–¶–µ—Ö: " + department + "\n")
		result.WriteString("–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: " + profession + "\n")
		result.WriteString("–ì–æ—Ä–æ–¥: " + city + "\n\n")
	}
	if result.Len() == 0 {
		result.WriteString("–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
	}

	sendMessageAutoDelete(chatID, result.String(), nil)
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

func handleMessage(msg *tgbotapi.Message) {
	userID := msg.From.ID
	state := userStates[userID]

	switch state {
	case "input_city":
		text := strings.TrimSpace(msg.Text)
		if text == "" {
			sendMessageAutoDelete(msg.Chat.ID, "–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", nil)
			return
		}
		setUserTempField(userID, "city", text)
		userStates[userID] = "input_experience"
		sendMessageAutoDelete(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∫–æ—Ä–æ—Ç–∫–æ):", nil)
		deleteMessageLater(msg.Chat.ID, msg.MessageID, 5)

	case "input_experience":
		text := strings.TrimSpace(msg.Text)
		if text == "" {
			sendMessageAutoDelete(msg.Chat.ID, "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", nil)
			return
		}
		setUserTempField(userID, "experience", text)
		userStates[userID] = "input_portfolio"
		sendMessageAutoDelete(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", nil)
		deleteMessageLater(msg.Chat.ID, msg.MessageID, 5)

	case "input_portfolio":
		text := strings.TrimSpace(msg.Text)
		if text == "" {
			sendMessageAutoDelete(msg.Chat.ID, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", nil)
			return
		}
		setUserTempField(userID, "portfolio", text)

		err := saveUserProfile(userID, msg.From.UserName)
		if err != nil {
			sendMessageAutoDelete(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.", nil)
			log.Println("Save profile error:", err)
			return
		}
		sendMessageAutoDelete(msg.Chat.ID, "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", nil)
		userStates[userID] = ""
		userTempData[userID] = nil
		deleteMessageLater(msg.Chat.ID, msg.MessageID, 5)

	default:
		// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", "create_profile"),
				tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", "view_profiles"),
			),
		)
		sendMessageAutoDelete(msg.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
		deleteMessageLater(msg.Chat.ID, msg.MessageID, 5)
	}
}

func setUserTempField(userID int64, field, value string) {
	p := userTempData[userID]
	if p == nil {
		p = &UserProfile{UserID: userID}
		userTempData[userID] = p
	}
	switch field {
	case "department":
		p.Department = value
	case "profession":
		p.Profession = value
	case "city":
		p.City = value
	case "experience":
		p.Experience = value
	case "portfolio":
		p.Portfolio = value
	}
}

func main() {
	// –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω
	token, err := readTokenFromConfig("config.cfg")
	if err != nil || token == "" {
		log.Fatal("TOKEN not found in config.cfg")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	err = initDB()
	if err != nil {
		log.Fatal("DB init error:", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			go handleCallbackQuery(update.CallbackQuery)
		}
	}
}
