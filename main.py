import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'cinema_collab.db'

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DB_NAME)
        self.cursor = self.conn.cursor()
        self._create_tables()
    
    def _create_tables(self):
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            department TEXT,
            profession TEXT,
            experience TEXT,
            portfolio TEXT,
            location TEXT
        )''')
        
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS favorites (
            user_id INTEGER,
            favorite_user_id INTEGER,
            PRIMARY KEY (user_id, favorite_user_id),
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (favorite_user_id) REFERENCES users (user_id)
        )''')
        self.conn.commit()
    
    def add_user(self, user_id, username, full_name):
        self.cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, full_name) 
        VALUES (?, ?, ?)''', (user_id, username, full_name))
        self.conn.commit()
    
    def update_profile(self, user_id, **kwargs):
        set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
        values = list(kwargs.values()) + [user_id]
        self.cursor.execute(f'''
        UPDATE users SET {set_clause} WHERE user_id = ?''', values)
        self.conn.commit()
    
    def delete_user(self, user_id):
        self.cursor.execute('DELETE FROM favorites WHERE user_id = ? OR favorite_user_id = ?', (user_id, user_id))
        self.cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        self.conn.commit()
    
    def get_user(self, user_id):
        self.cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return self.cursor.fetchone()
    
    def search_users(self, **filters):
        where_clause = ' AND '.join([f"{key} = ?" for key in filters.keys()]) if filters else '1'
        query = f'SELECT * FROM users WHERE {where_clause}'
        self.cursor.execute(query, list(filters.values()))
        return self.cursor.fetchall()
    
    def add_favorite(self, user_id, favorite_user_id):
        self.cursor.execute('''
        INSERT OR IGNORE INTO favorites (user_id, favorite_user_id) 
        VALUES (?, ?)''', (user_id, favorite_user_id))
        self.conn.commit()
    
    def remove_favorite(self, user_id, favorite_user_id):
        self.cursor.execute('''
        DELETE FROM favorites WHERE user_id = ? AND favorite_user_id = ?''', 
        (user_id, favorite_user_id))
        self.conn.commit()
    
    def get_favorites(self, user_id):
        self.cursor.execute('''
        SELECT u.* FROM users u
        JOIN favorites f ON u.user_id = f.favorite_user_id
        WHERE f.user_id = ?''', (user_id,))
        return self.cursor.fetchall()
    
    def is_favorite(self, user_id, favorite_user_id):
        self.cursor.execute('''
        SELECT 1 FROM favorites WHERE user_id = ? AND favorite_user_id = ?''', 
        (user_id, favorite_user_id))
        return bool(self.cursor.fetchone())

db = Database()

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ProfileStates(StatesGroup):
    department = State()
    profession = State()
    experience = State()
    portfolio = State()
    location = State()

class SearchStates(StatesGroup):
    department = State()
    profession = State()

# –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ—Ö–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
DEPARTMENTS = {
    "–†–µ–∂–∏—Å—Å–µ—Ä—Å–∫–∏–π —Ü–µ—Ö": [
        "–†–µ–∂–∏—Å—Å–µ—Ä—ã-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏",
        "–†–µ–∂–∏—Å—Å–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–í—Ç–æ—Ä—ã–µ —Ä–µ–∂–∏—Å—Å–µ—Ä—ã",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ø–æ –∞–∫—Ç–µ—Ä–∞–º",
        "–ü–æ–º–æ—â–Ω–∏–∫–∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞",
        "–ë—Ä–∏–≥–∞–¥–∏—Ä—ã –ê–ú–°",
        "–ö–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"
    ],
    "–ó–≤—É–∫–æ–≤–æ–π —Ü–µ—Ö": [
        "–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä—ã",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å–µ—Ä–∞"
    ],
    "–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ü–µ—Ö": [
        "–í—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
        "–ö–∞–º–µ—Ä–º–µ–Ω—ã",
        "–§–æ–∫—É—Å-–ø—É–ª–ª–µ—Ä—ã",
        "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –ø–∏–ª–æ—Ç—ã –∫–æ–ø—Ç–µ—Ä–æ–≤",
        "–û—Å–≤–µ—Ç–∏—Ç–µ–ª–∏",
        "–ì—Ä–∏–ø",
        "Gaffer"
    ],
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ-–ø–æ—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ü–µ—Ö": [
        "–•—É–¥–æ–∂–Ω–∏–∫–∏-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∞-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞",
        "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã",
        "–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ –∫–∞–¥—Ä–∞"
    ],
    "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—É": [
        "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—É(–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—É)",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—É",
        "–†–µ–∫–≤–∏–∑–∏—Ç–æ—Ä—ã"
    ],
    "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ –≥—Ä–∏–º—É": [
        "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ –≥—Ä–∏–º—É",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –ø–æ –≥—Ä–∏–º—É",
        "–ì—Ä–∏–º–µ—Ä—ã",
        "–ü–æ—Å—Ç–∏–∂–µ—Ä—ã"
    ],
    "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ –∫–æ—Å—Ç—é–º–∞–º": [
        "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ –∫–æ—Å—Ç—é–º–∞–º",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –ø–æ –∫–æ—Å—Ç—é–º–∞–º",
        "–•—É–¥–æ–∂–Ω–∏–∫–∏-—Ñ–∞–∫—Ç—É—Ä–æ–≤—â–∏–∫–∏",
        "–ö–æ—Å—Ç—é–º–µ—Ä—ã"
    ],
    "–ê–∫—Ç–µ—Ä—Å–∫–∏–π —Ü–µ—Ö": [
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ä–æ–ª–µ–π –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞–Ω–∞",
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ª–∏–Ω–µ–π–Ω—ã—Ö —Ä–æ–ª–µ–π",
        "–≠–ø–∏–∑–æ–¥–Ω–∏–∫–∏",
        "–î—É–±–ª–µ—Ä—ã",
        "–°—Ç–∞—Ç–∏—Å—Ç—ã",
        "–ì—Ä—É–ø–ø–æ–≤–∫–∞",
        "–ê–∫—Ç–µ—Ä—ã –º–∞—Å—Å–æ–≤—ã—Ö —Å—Ü–µ–Ω"
    ],
    "–ü—Ä–æ–¥—é—Å–µ—Ä—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç": [
        "–ü—Ä–æ–¥—é—Å–µ—Ä—ã –∫–∏–Ω–æ –∏ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è",
        "–ü—Ä–æ–¥—é—Å–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—é—Å–µ—Ä—ã",
        "–õ–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–æ–¥—é—Å–µ—Ä—ã",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤",
        "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∏–Ω–æ–æ–±—ä–µ–∫—Ç–æ–≤ (–õ–æ–∫–µ–π—à–µ–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä—ã)"
    ],
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ—Ö": [
        "–î–∏—Ä–µ–∫—Ç–æ—Ä–∞ —Ñ–∏–ª—å–º–∞",
        "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ (–ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É, –æ–±—ä–µ–∫—Ç–∞–º)",
        "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å—ä–µ–º–æ—á–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ –ø–ª–æ—â–∞–¥–∫–∏",
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã",
        "–†–∞–±–æ—á–∏–µ",
        "–ë—É—Ñ–µ—Ç"
    ],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Ü–µ—Ö": [
        "–í–æ–¥–∏—Ç–µ–ª–∏"
    ],
    "–ö–∞—Å–∫–∞–¥–µ—Ä—Å–∫–æ-–ø–∏—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç": [
        "–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ —Ç—Ä—é–∫–æ–≤",
        "–ö–∞—Å–∫–∞–¥–µ—Ä—ã",
        "–ü–∏—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏"
    ],
    "–¶–µ—Ö —Å–∫—Ä–∏–ø—Ç-—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤": [
        "–°–∫—Ä–∏–ø—Ç-—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã"
    ],
    "–ú–æ–Ω—Ç–∞–∂–Ω—ã–π —Ü–µ—Ö": [
        "–†–µ–∂–∏—Å—Å–µ—Ä—ã –º–æ–Ω—Ç–∞–∂–∞",
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞",
        "–ú–æ–Ω—Ç–∞–∂–µ—Ä—ã",
        "–õ–æ–≥–≥–µ—Ä—ã"
    ],
    "–ê–Ω–∏–º–∞—Ü–∏—è": [
        "–•—É–¥–æ–∂–Ω–∏–∫–∏-–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤",
        "–ö–æ–Ω—Ü–µ–ø—Ç-—Ö—É–¥–æ–∂–Ω–∏–∫–∏",
        "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
        "–•—É–¥–æ–∂–Ω–∏–∫–∏ –ø–æ —Ñ–æ–Ω–∞–º",
        "–†–µ–∂–∏—Å—Å–µ—Ä—ã –∞–Ω–∏–º–∞—Ç–∏–∫–∞",
        "–ê–Ω–∏–º–∞—Ç–∏–∫–µ—Ä—ã",
        "–õ–µ–π–∞—É—Ç-—Ö—É–¥–æ–∂–Ω–∏–∫–∏",
        "–•—É–¥–æ–∂–Ω–∏–∫–∏-–∞–Ω–∏–º–∞—Ç–æ—Ä—ã",
        "–ü—Ä–æ—Ä–∏—Å–æ–≤—â–∏–∫–∏",
        "–ó–∞–ª–∏–≤—â–∏–∫–∏",
        "2D –∞–Ω–∏–º–∞—Ç–æ—Ä—ã (–ø–µ—Ä–µ–∫–ª–∞–¥–∫–∞/–≥–∏–±—Ä–∏–¥–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è/–∫–æ—Å—Ç–Ω–∞—è)",
        "2D —Ä–∏–≥–≥–∏–Ω–≥",
        "3D –∞–Ω–∏–º–∞—Ç–æ—Ä—ã",
        "Stop-motion –∞–Ω–∏–º–∞—Ç–æ—Ä—ã",
        "3D —Ä–∏–≥–≥–∏–Ω–≥",
        "–ú–æ–¥–µ–ª–ª–µ—Ä—ã",
        "3D –õ–µ–π–∞—É—Ç",
        "–ö–æ–º–ø–æ—É–∑–µ—Ä—ã",
        "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ —Å–≤–µ—Ç—É",
        "–†–µ–Ω–¥–µ—Ä"
    ]
}

EXPERIENCE_LEVELS = ["–ë–µ–∑ –æ–ø—ã—Ç–∞", "–î–æ 1 –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞", "3-5 –ª–µ—Ç", "5+ –ª–µ—Ç"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîç –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–≥", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    keyboard.add("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    return keyboard

def get_departments_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*DEPARTMENTS.keys())
    keyboard.add("üîô –ù–∞–∑–∞–¥")
    return keyboard

def get_professions_keyboard(department):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    professions = DEPARTMENTS.get(department, [])
    for profession in professions:
        keyboard.add(profession)
    keyboard.add("üîô –ù–∞–∑–∞–¥")
    return keyboard

def get_profile_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile"),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_profile")
    )
    return keyboard

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
user_message_ids = {}

async def cleanup_chat(chat_id):
    """–£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        if chat_id in user_message_ids:
            for msg_id in user_message_ids[chat_id]:
                try:
                    await bot.delete_message(chat_id, msg_id)
                except:
                    continue
            user_message_ids[chat_id] = []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")

async def track_message(chat_id, message_id):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    if chat_id not in user_message_ids:
        user_message_ids[chat_id] = []
    user_message_ids[chat_id].append(message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await cleanup_chat(message.chat.id)
    db.add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)
    msg = await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–≥ –≤ –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=get_main_menu()
    )
    await track_message(message.chat.id, msg.message_id)

@dp.message_handler(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    await cleanup_chat(message.chat.id)
    user = db.get_user(message.from_user.id)
    if not user:
        msg = await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)
        return
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"<b>–¶–µ—Ö:</b> {user[3] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user[4] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–û–ø—ã—Ç:</b> {user[5] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {user[6] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {user[7] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
    )
    
    msg = await message.answer(profile_text, reply_markup=get_profile_keyboard(), parse_mode="HTML")
    await track_message(message.chat.id, msg.message_id)

@dp.callback_query_handler(text="edit_profile")
async def edit_profile(callback: types.CallbackQuery):
    await cleanup_chat(callback.message.chat.id)
    msg = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö:", reply_markup=get_departments_keyboard())
    await track_message(callback.message.chat.id, msg.message_id)
    await ProfileStates.department.set()
    await callback.answer()

@dp.callback_query_handler(text="delete_profile")
async def delete_profile(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    )
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query_handler(text="confirm_delete")
async def confirm_delete(callback: types.CallbackQuery):
    db.delete_user(callback.from_user.id)
    msg = await callback.message.answer("üóëÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu())
    await track_message(callback.message.chat.id, msg.message_id)
    await callback.answer()

@dp.callback_query_handler(text="cancel_delete")
async def cancel_delete(callback: types.CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if user:
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"<b>–¶–µ—Ö:</b> {user[3] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user[4] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–û–ø—ã—Ç:</b> {user[5] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {user[6] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {user[7] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        await callback.message.edit_text(profile_text, reply_markup=get_profile_keyboard(), parse_mode="HTML")
    else:
        await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    await callback.answer()

@dp.message_handler(text="üîç –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–≥")
async def search_colleagues(message: types.Message):
    await cleanup_chat(message.chat.id)
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_departments_keyboard())
    await track_message(message.chat.id, msg.message_id)
    await SearchStates.department.set()

@dp.message_handler(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: types.Message):
    await cleanup_chat(message.chat.id)
    favorites = db.get_favorites(message.from_user.id)
    if not favorites:
        msg = await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)
        return
    
    main_msg = await message.answer("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:", reply_markup=get_main_menu())
    await track_message(message.chat.id, main_msg.message_id)
    
    for user in favorites:
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"<b>–ò–º—è:</b> {user[2]}\n"
            f"<b>–¶–µ—Ö:</b> {user[3]}\n"
            f"<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user[4]}\n"
            f"<b>–û–ø—ã—Ç:</b> {user[5]}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {user[7]}\n\n"
            f"<a href='tg://user?id={user[0]}'>–ù–∞–ø–∏—Å–∞—Ç—å</a>"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", 
            callback_data=f"remove_favorite_{user[0]}"
        ))
        
        msg = await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        await track_message(message.chat.id, msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(state=ProfileStates.department)
async def process_department(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        msg = await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)
        return
    
    if message.text not in DEPARTMENTS:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_departments_keyboard())
        await track_message(message.chat.id, msg.message_id)
        return
    
    await state.update_data(department=message.text)
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", reply_markup=get_professions_keyboard(message.text))
    await track_message(message.chat.id, msg.message_id)
    await ProfileStates.profession.set()

@dp.message_handler(state=ProfileStates.profession)
async def process_profession(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await ProfileStates.department.set()
        data = await state.get_data()
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö:", reply_markup=get_departments_keyboard())
        await track_message(message.chat.id, msg.message_id)
        return
    
    data = await state.get_data()
    department = data.get('department')
    
    if message.text not in DEPARTMENTS.get(department, []):
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_professions_keyboard(department))
        await track_message(message.chat.id, msg.message_id)
        return
    
    await state.update_data(profession=message.text)
    msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:", reply_markup=types.ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=2
    ).add(*EXPERIENCE_LEVELS).add("üîô –ù–∞–∑–∞–¥"))
    await track_message(message.chat.id, msg.message_id)
    await ProfileStates.experience.set()

@dp.message_handler(state=ProfileStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        await ProfileStates.profession.set()
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", reply_markup=get_professions_keyboard(data.get('department')))
        await track_message(message.chat.id, msg.message_id)
        return
    
    if message.text not in EXPERIENCE_LEVELS:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=types.ReplyKeyboardMarkup(
            resize_keyboard=True, row_width=2
        ).add(*EXPERIENCE_LEVELS).add("üîô –ù–∞–∑–∞–¥"))
        await track_message(message.chat.id, msg.message_id)
        return
    
    await state.update_data(experience=message.text)
    msg = await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=types.ReplyKeyboardMarkup(
        resize_keyboard=True
    ).add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").add("üîô –ù–∞–∑–∞–¥"))
    await track_message(message.chat.id, msg.message_id)
    await ProfileStates.portfolio.set()

@dp.message_handler(state=ProfileStates.portfolio)
async def process_portfolio(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await ProfileStates.experience.set()
        msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:", reply_markup=types.ReplyKeyboardMarkup(
            resize_keyboard=True, row_width=2
        ).add(*EXPERIENCE_LEVELS).add("üîô –ù–∞–∑–∞–¥"))
        await track_message(message.chat.id, msg.message_id)
        return
    
    portfolio = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
    await state.update_data(portfolio=portfolio)
    msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é (–≥–æ—Ä–æ–¥):", reply_markup=types.ReplyKeyboardMarkup(
        resize_keyboard=True
    ).add("üîô –ù–∞–∑–∞–¥"))
    await track_message(message.chat.id, msg.message_id)
    await ProfileStates.location.set()

@dp.message_handler(state=ProfileStates.location)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await ProfileStates.portfolio.set()
        msg = await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=types.ReplyKeyboardMarkup(
            resize_keyboard=True
        ).add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").add("üîô –ù–∞–∑–∞–¥"))
        await track_message(message.chat.id, msg.message_id)
        return
    
    data = await state.get_data()
    
    db.update_profile(
        message.from_user.id,
        department=data.get('department'),
        profession=data.get('profession'),
        experience=data.get('experience'),
        portfolio=data.get('portfolio', ''),
        location=message.text
    )
    
    await state.finish()
    msg = await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_menu())
    await track_message(message.chat.id, msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(state=SearchStates.department)
async def search_department(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        msg = await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)
        return
    
    if message.text not in DEPARTMENTS:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_departments_keyboard())
        await track_message(message.chat.id, msg.message_id)
        return
    
    await state.update_data(department=message.text)
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", reply_markup=get_professions_keyboard(message.text))
    await track_message(message.chat.id, msg.message_id)
    await SearchStates.profession.set()

@dp.message_handler(state=SearchStates.profession)
async def search_profession(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await SearchStates.department.set()
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ—Ö:", reply_markup=get_departments_keyboard())
        await track_message(message.chat.id, msg.message_id)
        return
    
    data = await state.get_data()
    department = data.get('department')
    
    if message.text not in DEPARTMENTS.get(department, []):
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_professions_keyboard(department))
        await track_message(message.chat.id, msg.message_id)
        return
    
    results = db.search_users(
        department=department,
        profession=message.text
    )
    
    if not results:
        msg = await message.answer("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.", 
                           reply_markup=get_professions_keyboard(department))
        await track_message(message.chat.id, msg.message_id)
        return
    
    main_msg = await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", reply_markup=get_main_menu())
    await track_message(message.chat.id, main_msg.message_id)
    
    for user in results:
        is_favorite = db.is_favorite(message.from_user.id, user[0])
        profile_text = (
            f"üë§ <b>–ù–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b>\n\n"
            f"<b>–ò–º—è:</b> {user[2]}\n"
            f"<b>–¶–µ—Ö:</b> {user[3]}\n"
            f"<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {user[4]}\n"
            f"<b>–û–ø—ã—Ç:</b> {user[5]}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {user[7]}\n\n"
            f"<a href='tg://user?id={user[0]}'>–ù–∞–ø–∏—Å–∞—Ç—å</a>"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        if is_favorite:
            keyboard.add(types.InlineKeyboardButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", 
                callback_data=f"remove_favorite_{user[0]}"
            ))
        else:
            keyboard.add(types.InlineKeyboardButton(
                "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", 
                callback_data=f"add_favorite_{user[0]}"
            ))
        
        msg = await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        await track_message(message.chat.id, msg.message_id)
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query_handler(lambda c: c.data.startswith('add_favorite_'))
async def add_to_favorites(callback: types.CallbackQuery):
    favorite_user_id = int(callback.data.split('_')[2])
    db.add_favorite(callback.from_user.id, favorite_user_id)
    await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    await callback.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_favorite_{favorite_user_id}")
    ))

@dp.callback_query_handler(lambda c: c.data.startswith('remove_favorite_'))
async def remove_from_favorites(callback: types.CallbackQuery):
    favorite_user_id = int(callback.data.split('_')[2])
    db.remove_favorite(callback.from_user.id, favorite_user_id)
    await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    await callback.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{favorite_user_id}")
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_text(message: types.Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        msg = await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)
    else:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=get_main_menu())
        await track_message(message.chat.id, msg.message_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)
